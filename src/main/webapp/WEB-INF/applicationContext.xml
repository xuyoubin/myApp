<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	">

	<context:property-placeholder location="classpath:jdbc.properties" system-properties-mode="FALLBACK"/>


	<!-- 数据源 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>  
				<prop key="hibernate.dialect"> ${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.showSql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate3.SpringSessionContext</prop>
				<prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory</prop>

			</props>
		</property>
	</bean>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
	</bean>


	<!--自己写jdbc 配置 jadbcTemplate -->
	<!--<bean id = "jdbcTemplate" class ="org.springframework.jdbc.core.JdbcTemplate">-->
		<!--<property name="dataSource" ref="dataSource"/>-->
	<!--</bean>-->

	<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!--<bean id="userServiceImpl"   class="com.service.impl.UserServiceImpl"/>-->


	<!-- 配置AOP通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 配置事务属性 -->
		<tx:attributes>
			<!-- 添加事务管理的方法 -->
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="select*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>

	<!-- 配置AOP，为添加事务管理的操作配置AOP -->
	<!-- 引入的Spring定义的事务通知，需要使用aop:advisor -->
	<!-- 下面难 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
					 pointcut="execution(* com.service.*.*(..))"
		/>
		<!--<aop:pointcut id="txPointcut" expression="execution(* com.service.impl..*.*(..))"/>-->
		<!--<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>-->

	</aop:config>


	<!--<aop:aspect id ="logc" ref="Logc">-->
		<!--<aop:around method = "round" pointcut="execution() or or and !bean(logsService)"/>-->
		<!---->
	<!--</aop:aspect>-->
	<!--<aop:config/>-->


</beans>
