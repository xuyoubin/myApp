#kafka资源配置

#kafka生产者配置
#生产者服务器地址
bootstrap.servers=localhost:9092
#默认sync    指定消息发送是同步还是异步。异步asyc成批发送用kafka.producer.AyncProducer， 同步sync用kafka.producer.SyncProducer
producer.type=sync
#0表示producer无需等待leader的确认，1代表需要leader确认写入它的本地log并立即确认，-1代表所有的备份都完成后确认。 仅仅for sync
request.required.acks=0
#设置key和value序列化方式
key.serializer=org.apache.kafka.common.serialization.StringSerializer
value.serializer=org.apache.kafka.common.serialization.StringSerializer
#producer缓存每个分区未发送消息，缓存的大小是通过batch.size()配置设定的。值较大的话将会产生更大的批。并需要更多的内存(因为每个“活跃”的分区都有一个缓冲区)
batch.size=16384
#默认缓冲区可立即发送，即便缓冲区空间没有满；但是，如果你想减少请求的数量，可以设置linger.ms大于0.这将指示生产者发送请求之前等待一段时间
#希望更多的消息补填到未满的批中。这类似于tcp的算法，例如上面的代码段，可能100条消息在一个请求发送，因为我们设置了linger时间为1ms，然后，如果我们
#没有填满缓冲区，这个设置将增加1ms的延迟请求以等待更多的消息。需要注意的是，在高负载下，相近的时间一般也会组成批，即使是linger.ms=0。
#不处于高负载的情况下，如果设置比0大，以少量的延迟代价换取更少的，更有效的请求。
linger.ms=1

#消费者配置
#zookeeper服务器地址
zookeeper.connect=localhost:2181
#消费者群组ID，发布-订阅模式，即如果一个生产者，多个消费者都要消费，那么需要定义自己的群组，同一个群组内的消费者只有一个能消费到消息
group.id=myApp001
#session.timeout.ms:在使用kafka的组管理时，用于检测消费者故障的超时
session.timeout.ms=4000
#如何设置为自动提交（enable.auto.commit=true）,这里设置自动提交周期 1000
auto.commit.interval.ms=60  

auto.offset.reset=smallest

# kafka消息配置信息
kafka.consumer.topic=myAppKafka


